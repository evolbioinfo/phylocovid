import os

# To run locally:
# snakemake --snakefile Snakefile_phylogeography --keep-going --cores 7 --configfile config.yaml --use-singularity --singularity-prefix ~/.singularity --singularity-args "--home ~"

# To visualise the pipeline
# snakemake --snakefile Snakefile_phylogeography --configfile config.yaml --dag | dot -Tsvg > pipeline_phylogeography.svg


localrules: all
ruleorder: pastml_vis_tree > pastml_vis > pastml_col

folder = os.path.abspath(config["folder"])
dates = config["dates"]
N = 5
freqs = ['phylogenetic']

rule all:
    input:
        expand(os.path.join(folder, '{date}', 'acr', 'map.country.html'), date=dates),
        expand(os.path.join(folder, '{date}', 'acr', '{type}.country.raxfast_subsampled_{freq}_{i}.lsd2.html'), date=dates, freq=freqs, i=range(N), type=['compressed', 'full']),
        expand(os.path.join(folder, '{date}', 'metadata', 'pastml_country.tab'), date=dates)


rule pastml_col:
    '''
    ACR with PastML.
    '''
    input:
        tree = os.path.join(folder, '{date}', 'timetrees', '{tree}.{dating}.nexus'),
        data = os.path.join(folder, '{date}', 'metadata', 'locations.tab'),
        freqs = os.path.join(folder, '{date}', 'metadata', 'freqs_proportional_{col}.tab'),
    output:
        data = os.path.join(folder, '{date}', 'acr', 'pastml', '{col}', '{tree}.{dating,lsd2|tt-[a-z]+}', 'combined_ancestral_states.tab'),
        pars = os.path.join(folder, '{date}', 'acr', 'pastml', '{col}', '{tree}.{dating}', 'params.character_{col}.method_MPPA.model_F81.tab'),
        tree = os.path.join(folder, '{date}', 'acr', 'pastml', '{col}', '{tree}.{dating}', 'named.tree_{tree}.{dating}.nwk'),
    threads: 2
    singularity: "docker://evolbioinfo/pastml:v1.9.29.6"
    params:
        mem = 4000,
        name = 'pastml_{col}.{tree}.{dating}_{date}',
        wd = os.path.join(folder, '{date}', 'acr', 'pastml', '{col}', '{tree}.{dating}')
    shell:
        """
        echo "pastml --tree {input.tree} --data {input.data} --columns "{wildcards.col}" -v --work_dir "{params.wd}" --parameters {input.freqs} --smoothing --resolve_polytomies --reoptimise"
        pastml --tree {input.tree} --data {input.data} --columns "{wildcards.col}" -v --work_dir "{params.wd}" --parameters {input.freqs} --smoothing --resolve_polytomies --reoptimise
        """

rule pastml_vis:
    '''
    Visualisation with PastML.
    '''
    input:
        tree = os.path.join(folder, '{date}', 'acr', 'pastml', '{col}', '{tree}.{dating}', 'named.tree_{tree}.{dating}.nwk'),
        colours = os.path.join(folder, 'country_colours.tab'),
    output:
        map = os.path.join(folder, '{date}', 'acr', 'compressed.{col,country|region|intregion}.{tree}.{dating,lsd2|tt-[a-z]+}.html'),
    threads: 2
    singularity: "docker://evolbioinfo/pastml:v1.9.29.6"
    params:
        mem = 4000,
        name = 'pastml_{col}.{tree}.{dating}_vis_{date}',
        wd = os.path.join(folder, '{date}', 'acr', 'pastml', 'vis_{col}', '{tree}.{dating}'),
        qos = 'fast'
    shell:
        """
        pastml --tree {input.tree} -v --work_dir "{params.wd}" --html_compressed "{output.map}" \
        --columns "{wildcards.col}" --tip_size_threshold 15 --prediction_method COPY --colours {input.colours}

        rm -rf "{params.wd}"
        """

rule pastml_vis_tree:
    '''
    Visualisation with PastML.
    '''
    input:
        tree = os.path.join(folder, '{date}', 'acr', 'pastml', '{col}', '{tree}.{dating}', 'named.tree_{tree}.{dating}.nwk'),
        colours = os.path.join(folder, 'country_colours.tab'),
    output:
        map = os.path.join(folder, '{date}', 'acr', 'full.{col,country|region|intregion}.{tree}.{dating,lsd2|tt-[a-z]+}.html'),
    threads: 2
    singularity: "docker://evolbioinfo/pastml:v1.9.29.6"
    params:
        mem = 4000,
        name = 'pastml_{col}.{tree}.{dating}_vist_{date}',
        wd = os.path.join(folder, '{date}', 'acr', 'pastml', 'vist_{col}', '{tree}.{dating}'),
        qos = 'fast'
    shell:
        """
        pastml --tree {input.tree} -v --work_dir "{params.wd}" --html "{output.map}" \
        --columns "{wildcards.col}" --prediction_method COPY --colours {input.colours}

        rm -rf "{params.wd}"
        """

rule geomap:
    '''
    Reconstructs the geographical map coloured according to PastML categories.
    '''
    input:
        data = os.path.join(folder, '{date}', 'metadata', 'locations.tab'),
    output:
        geo_map = os.path.join(folder, '{date}', 'acr', 'map.{loc}.html'),
    threads: 1
    params:
        mem = 4000,
        name = 'geomap_{loc}_{date}'
    singularity: "docker://evolbioinfo/pastml:v1.9.29.6"
    shell:
        """
        geomap --data {input.data} --html {output.geo_map} --location {wildcards.loc} --country iso2
        """